package main

import (
	"fmt"
	"image/color"
	"strconv"
	"strings"
	"time"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/canvas"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/dialog"
	"fyne.io/fyne/v2/layout"
	"fyne.io/fyne/v2/widget"
)

var aCRCHi = []byte{
	 0x00,  0xc1,  0x81,  0x40,  0x01,  0xc0,  0x80,  0x41,  0x01,  0xc0,  0x80,  0x41,  0x00,  0xc1,  0x81,
	 0x40,  0x01,  0xc0,  0x80,  0x41,  0x00,  0xc1,  0x81,  0x40,  0x00,  0xc1,  0x81,  0x40,  0x01,  0xc0,
	 0x80,  0x41,  0x01,  0xc0,  0x80,  0x41,  0x00,  0xc1,  0x81,  0x40,  0x00,  0xc1,  0x81,  0x40,  0x01,
	 0xc0,  0x80,  0x41,  0x00,  0xc1,  0x81,  0x40,  0x01,  0xc0,  0x80,  0x41,  0x01,  0xc0,  0x80,  0x41,
	 0x00,  0xc1,  0x81,  0x40,  0x01,  0xc0,  0x80,  0x41,  0x00,  0xc1,  0x81,  0x40,  0x00,  0xc1,  0x81,
	 0x40,  0x01,  0xc0,  0x80,  0x41,  0x00,  0xc1,  0x81,  0x40,  0x01,  0xc0,  0x80,  0x41,  0x01,  0xc0,
	 0x80,  0x41,  0x00,  0xc1,  0x81,  0x40,  0x00,  0xc1,  0x81,  0x40,  0x01,  0xc0,  0x80,  0x41,  0x01,
	 0xc0,  0x80,  0x41,  0x00,  0xc1,  0x81,  0x40,  0x01,  0xc0,  0x80,  0x41,  0x00,  0xc1,  0x81,  0x40,
	 0x00,  0xc1,  0x81,  0x40,  0x01,  0xc0,  0x80,  0x41,  0x01,  0xc0,  0x80,  0x41,  0x00,  0xc1,  0x81,
	 0x40,  0x00,  0xc1,  0x81,  0x40,  0x01,  0xc0,  0x80,  0x41,  0x00,  0xc1,  0x81,  0x40,  0x01,  0xc0,
	 0x80,  0x41,  0x01,  0xc0,  0x80,  0x41,  0x00,  0xc1,  0x81,  0x40,  0x00,  0xc1,  0x81,  0x40,  0x01,
	 0xc0,  0x80,  0x41,  0x01,  0xc0,  0x80,  0x41,  0x00,  0xc1,  0x81,  0x40,  0x01,  0xc0,  0x80,  0x41,
	 0x00,  0xc1,  0x81,  0x40,  0x00,  0xc1,  0x81,  0x40,  0x01,  0xc0,  0x80,  0x41,  0x00,  0xc1,  0x81,
	 0x40,  0x01,  0xc0,  0x80,  0x41,  0x01,  0xc0,  0x80,  0x41,  0x00,  0xc1,  0x81,  0x40,  0x01,  0xc0,
	 0x80,  0x41,  0x00,  0xc1,  0x81,  0x40,  0x00,  0xc1,  0x81,  0x40,  0x01,  0xc0,  0x80,  0x41,  0x01,
	 0xc0,  0x80,  0x41,  0x00,  0xc1,  0x81,  0x40,  0x00,  0xc1,  0x81,  0x40,  0x01,  0xc0,  0x80,  0x41,
	 0x00,  0xc1,  0x81,  0x40,  0x01,  0xc0,  0x80,  0x41,  0x01,  0xc0,  0x80,  0x41,  0x00,  0xc1,  0x81,  0x40,
}

var aCRCLo = []byte{
	 0x00,  0xc0,  0xc1,  0x01,  0xc3,  0x03,  0x02,  0xc2,  0xc6,  0x06,  0x07,  0xc7,  0x05,  0xc5,  0xc4,
	 0x04,  0xcc,  0x0c,  0x0d,  0xcd,  0x0f,  0xcf,  0xce,  0x0e,  0x0a,  0xca,  0xcb,  0x0b,  0xc9,  0x09,
	 0x08,  0xc8,  0xd8,  0x18,  0x19,  0xd9,  0x1b,  0xdb,  0xda,  0x1a,  0x1e,  0xde,  0xdf,  0x1f,  0xdd,
	 0x1d,  0x1c,  0xdc,  0x14,  0xd4,  0xd5,  0x15,  0xd7,  0x17,  0x16,  0xd6,  0xd2,  0x12,  0x13,  0xd3,
	 0x11,  0xd1,  0xd0,  0x10,  0xf0,  0x30,  0x31,  0xf1,  0x33,  0xf3,  0xf2,  0x32,  0x36,  0xf6,  0xf7,
	 0x37,  0xf5,  0x35,  0x34,  0xf4,  0x3c,  0xfc,  0xfd,  0x3d,  0xff,  0x3f,  0x3e,  0xfe,  0xfa,  0x3a,
	 0x3b,  0xfb,  0x39,  0xf9,  0xf8,  0x38,  0x28,  0xe8,  0xe9,  0x29,  0xeb,  0x2b,  0x2a,  0xea,  0xee,
	 0x2e,  0x2f,  0xef,  0x2d,  0xed,  0xec,  0x2c,  0xe4,  0x24,  0x25,  0xe5,  0x27,  0xe7,  0xe6,  0x26,
	 0x22,  0xe2,  0xe3,  0x23,  0xe1,  0x21,  0x20,  0xe0,  0xa0,  0x60,  0x61,  0xa1,  0x63,  0xa3,  0xa2,
	 0x62,  0x66,  0xa6,  0xa7,  0x67,  0xa5,  0x65,  0x64,  0xa4,  0x6c,  0xac,  0xad,  0x6d,  0xaf,  0x6f,
	 0x6e,  0xae,  0xaa,  0x6a,  0x6b,  0xab,  0x69,  0xa9,  0xa8,  0x68,  0x78,  0xb8,  0xb9,  0x79,  0xbb,
	 0x7b,  0x7a,  0xba,  0xbe,  0x7e,  0x7f,  0xbf,  0x7d,  0xbd,  0xbc,  0x7c,  0xb4,  0x74,  0x75,  0xb5,
	 0x77,  0xb7,  0xb6,  0x76,  0x72,  0xb2,  0xb3,  0x73,  0xb1,  0x71,  0x70,  0xb0,  0x50,  0x90,  0x91,
	 0x51,  0x93,  0x53,  0x52,  0x92,  0x96,  0x56,  0x57,  0x97,  0x55,  0x95,  0x94,  0x54,  0x9c,  0x5c,
	 0x5d,  0x9d,  0x5f,  0x9f,  0x9e,  0x5e,  0x5a,  0x9a,  0x9b,  0x5b,  0x99,  0x59,  0x58,  0x98,  0x88,
	 0x48,  0x49,  0x89,  0x4b,  0x8b,  0x8a,  0x4a,  0x4e,  0x8e,  0x8f,  0x4f,  0x8d,  0x4d,  0x4c,  0x8c,
	 0x44,  0x84,  0x85,  0x45,  0x87,  0x47,  0x46,  0x86,  0x82,  0x42,  0x43,  0x83,  0x41,  0x81,  0x80,
	 0x40,
}

func calculateCRC(message []byte) uint16 {
	hiByte := byte(0xFF)
	loByte := byte(0xFF)
	var index byte

	for _, msgByte := range message {
		index = hiByte ^ msgByte
		hiByte = loByte ^ aCRCHi[index]
		loByte = aCRCLo[index]
	}
	return (uint16(hiByte) << 8) | uint16(loByte)
}

func parseHexStringToBytes(hexStr string) ([]byte, error) {
	hexStr = strings.ReplaceAll(hexStr, " ", "")
	if len(hexStr)%2 != 0 {
		return nil, fmt.Errorf("ciąg szesnastkowy musi mieć parzystą długość")
	}
	if len(hexStr)/2 > 256 {
		return nil, fmt.Errorf("sekwencja nie może przekraczać 256 bajtów (%d znaków hex)", 256*2)
	}

	var bytes []byte
	for i := 0; i < len(hexStr); i += 2 {
		val, err := strconv.ParseUint(hexStr[i:i+2], 16, 8)
		if err != nil {
			return nil, fmt.Errorf("nieprawidłowy bajt szesnastkowy '%s': %v", hexStr[i:i+2], err)
		}
		bytes = append(bytes, byte(val))
	}
	return bytes, nil
}

func main() {
	myApp := app.New()
	myWindow := myApp.NewWindow("Suma kontrolna CRC16")
	myWindow.Resize(fyne.NewSize(450, 350))

	// Input fields
	hexInput := widget.NewEntry()
	repetitionsInput := widget.NewEntry()

	// Labels for results
	totalTimeLabel := widget.NewLabel("Czas całkowity: 0 ms")
	iterTimeLabel := widget.NewLabel("Czas 1 iteracji: 0.00000000 ms")
	crcResultLabel := widget.NewLabel("Suma kontrolna: XXXX")

	// Form items
	formItems := []*widget.FormItem{
		widget.NewFormItem("Bajty ramki:", hexInput),
		widget.NewFormItem("Liczba powtórzeń:", repetitionsInput),
	}

	// Information section
	infoTitle := canvas.NewText("Informacje", color.Gray{Y: 128})
	infoTitle.TextStyle = fyne.TextStyle{Bold: true}
	infoBox := container.NewVBox(
		infoTitle,
		totalTimeLabel,
		iterTimeLabel,
		crcResultLabel,
	)

	// Start button
	startButton := widget.NewButton("START", func() {
		// Reset labels
		totalTimeLabel.SetText("Czas całkowity: Calculating...")
		iterTimeLabel.SetText("Czas 1 iteracji: Calculating...")
		crcResultLabel.SetText("Suma kontrolna: Calculating...")

		go func() {
			hexStr := hexInput.Text
			dataBytes, err := parseHexStringToBytes(hexStr)
			if err != nil {
				fyne.Do(func() {
					dialog.ShowError(fmt.Errorf("Błąd w 'Bajty ramki': %v", err), myWindow)
					totalTimeLabel.SetText("Czas całkowity: Error")
					iterTimeLabel.SetText("Czas 1 iteracji: Error")
					crcResultLabel.SetText("Suma kontrolna: Error")
				})
				return
			}

			repetitionsStr := repetitionsInput.Text
			repetitions, err := strconv.ParseInt(repetitionsStr, 10, 64)
			if err != nil {
				fyne.Do(func() {
					dialog.ShowError(fmt.Errorf("Błąd w 'Liczba powtórzeń': %v", err), myWindow)
					totalTimeLabel.SetText("Czas całkowity: Error")
					iterTimeLabel.SetText("Czas 1 iteracji: Error")
					crcResultLabel.SetText("Suma kontrolna: Error")
				})
				return
			}

			if repetitions < 1 || repetitions > 1000000000 {
				fyne.Do(func() {
					dialog.ShowError(fmt.Errorf("Liczba powtórzeń musi być w zakresie 1..1000000000"), myWindow)
					totalTimeLabel.SetText("Czas całkowity: Error")
					iterTimeLabel.SetText("Czas 1 iteracji: Error")
					crcResultLabel.SetText("Suma kontrolna: Error")
				})
				return
			}

			var crcValue uint16
			startTime := time.Now()

			for i := int64(0); i < repetitions; i++ {
				crcValue = calculateCRC(dataBytes)
			}

			duration := time.Since(startTime)
			durationMs := duration.Milliseconds()
			var iterTimeNs float64
			if repetitions > 0 {
				iterTimeNs = float64(duration.Nanoseconds()) / float64(repetitions)
			}
			
			// Convert iterTimeNs to milliseconds for display
			iterTimeMs := iterTimeNs / 1_000_000.0

			fyne.Do(func() {
				totalTimeLabel.SetText(fmt.Sprintf("Czas całkowity: %d ms", durationMs))
				iterTimeLabel.SetText(fmt.Sprintf("Czas 1 iteracji: %.8f ms", iterTimeMs))
				crcResultLabel.SetText(fmt.Sprintf("Suma kontrolna: %04X", crcValue))
			})
		}()
	})

	form := widget.NewForm(formItems...)

	bottomContent := container.NewGridWithColumns(2,
		infoBox,
		container.New(layout.NewCenterLayout(), startButton),
	)

	content := container.New(layout.NewVBoxLayout(),
		form,
		widget.NewSeparator(),
		bottomContent,
	)

	myWindow.SetContent(content)
	myWindow.ShowAndRun()
}
